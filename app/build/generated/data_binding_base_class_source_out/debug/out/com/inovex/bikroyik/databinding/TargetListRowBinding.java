// Generated by view binder compiler. Do not edit!
package com.inovex.bikroyik.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import com.inovex.bikroyik.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class TargetListRowBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final LinearLayout llTargetListRow;

  @NonNull
  public final TextView targetProduct;

  @NonNull
  public final TextView targetQty;

  @NonNull
  public final TextView targetSaleQty;

  @NonNull
  public final TextView targetSaleValue;

  @NonNull
  public final TextView targetValue;

  private TargetListRowBinding(@NonNull LinearLayout rootView,
      @NonNull LinearLayout llTargetListRow, @NonNull TextView targetProduct,
      @NonNull TextView targetQty, @NonNull TextView targetSaleQty,
      @NonNull TextView targetSaleValue, @NonNull TextView targetValue) {
    this.rootView = rootView;
    this.llTargetListRow = llTargetListRow;
    this.targetProduct = targetProduct;
    this.targetQty = targetQty;
    this.targetSaleQty = targetSaleQty;
    this.targetSaleValue = targetSaleValue;
    this.targetValue = targetValue;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static TargetListRowBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static TargetListRowBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.target_list_row, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static TargetListRowBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.ll_target_list_row;
      LinearLayout llTargetListRow = rootView.findViewById(id);
      if (llTargetListRow == null) {
        break missingId;
      }

      id = R.id.target_product;
      TextView targetProduct = rootView.findViewById(id);
      if (targetProduct == null) {
        break missingId;
      }

      id = R.id.target_qty;
      TextView targetQty = rootView.findViewById(id);
      if (targetQty == null) {
        break missingId;
      }

      id = R.id.target_sale_qty;
      TextView targetSaleQty = rootView.findViewById(id);
      if (targetSaleQty == null) {
        break missingId;
      }

      id = R.id.target_sale_value;
      TextView targetSaleValue = rootView.findViewById(id);
      if (targetSaleValue == null) {
        break missingId;
      }

      id = R.id.target_value;
      TextView targetValue = rootView.findViewById(id);
      if (targetValue == null) {
        break missingId;
      }

      return new TargetListRowBinding((LinearLayout) rootView, llTargetListRow, targetProduct,
          targetQty, targetSaleQty, targetSaleValue, targetValue);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
