// Generated by view binder compiler. Do not edit!
package com.inovex.bikroyik.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import com.inovex.bikroyik.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ToolbarForEditSalesItemBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ImageView imgCloseEsi;

  @NonNull
  public final TextView productText;

  @NonNull
  public final TextView tvDeleteProduct;

  @NonNull
  public final TextView tvSaveEsi;

  @NonNull
  public final TextView tvTittleEsi;

  private ToolbarForEditSalesItemBinding(@NonNull ConstraintLayout rootView,
      @NonNull ImageView imgCloseEsi, @NonNull TextView productText,
      @NonNull TextView tvDeleteProduct, @NonNull TextView tvSaveEsi,
      @NonNull TextView tvTittleEsi) {
    this.rootView = rootView;
    this.imgCloseEsi = imgCloseEsi;
    this.productText = productText;
    this.tvDeleteProduct = tvDeleteProduct;
    this.tvSaveEsi = tvSaveEsi;
    this.tvTittleEsi = tvTittleEsi;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ToolbarForEditSalesItemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ToolbarForEditSalesItemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.toolbar_for_edit_sales_item, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ToolbarForEditSalesItemBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.img_close_esi;
      ImageView imgCloseEsi = rootView.findViewById(id);
      if (imgCloseEsi == null) {
        break missingId;
      }

      id = R.id.productText;
      TextView productText = rootView.findViewById(id);
      if (productText == null) {
        break missingId;
      }

      id = R.id.tv_deleteProduct;
      TextView tvDeleteProduct = rootView.findViewById(id);
      if (tvDeleteProduct == null) {
        break missingId;
      }

      id = R.id.tv_save_esi;
      TextView tvSaveEsi = rootView.findViewById(id);
      if (tvSaveEsi == null) {
        break missingId;
      }

      id = R.id.tv_tittle_esi;
      TextView tvTittleEsi = rootView.findViewById(id);
      if (tvTittleEsi == null) {
        break missingId;
      }

      return new ToolbarForEditSalesItemBinding((ConstraintLayout) rootView, imgCloseEsi,
          productText, tvDeleteProduct, tvSaveEsi, tvTittleEsi);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
