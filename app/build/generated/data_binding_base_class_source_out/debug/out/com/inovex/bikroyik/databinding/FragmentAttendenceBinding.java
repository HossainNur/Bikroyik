// Generated by view binder compiler. Do not edit!
package com.inovex.bikroyik.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import com.google.android.material.floatingactionbutton.FloatingActionButton;
import com.inovex.bikroyik.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentAttendenceBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final RecyclerView attendanceRecycler;

  @NonNull
  public final FloatingActionButton floatingComment;

  @NonNull
  public final LinearLayout llBottom;

  @NonNull
  public final LinearLayout llTitle;

  @NonNull
  public final TextView tvAttendanceInSubmit;

  @NonNull
  public final TextView tvAttendanceOutSubmit;

  @NonNull
  public final TextView tvTopMonthText;

  private FragmentAttendenceBinding(@NonNull RelativeLayout rootView,
      @NonNull RecyclerView attendanceRecycler, @NonNull FloatingActionButton floatingComment,
      @NonNull LinearLayout llBottom, @NonNull LinearLayout llTitle,
      @NonNull TextView tvAttendanceInSubmit, @NonNull TextView tvAttendanceOutSubmit,
      @NonNull TextView tvTopMonthText) {
    this.rootView = rootView;
    this.attendanceRecycler = attendanceRecycler;
    this.floatingComment = floatingComment;
    this.llBottom = llBottom;
    this.llTitle = llTitle;
    this.tvAttendanceInSubmit = tvAttendanceInSubmit;
    this.tvAttendanceOutSubmit = tvAttendanceOutSubmit;
    this.tvTopMonthText = tvTopMonthText;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentAttendenceBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentAttendenceBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_attendence, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentAttendenceBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.attendance_recycler;
      RecyclerView attendanceRecycler = rootView.findViewById(id);
      if (attendanceRecycler == null) {
        break missingId;
      }

      id = R.id.floating_comment;
      FloatingActionButton floatingComment = rootView.findViewById(id);
      if (floatingComment == null) {
        break missingId;
      }

      id = R.id.llBottom;
      LinearLayout llBottom = rootView.findViewById(id);
      if (llBottom == null) {
        break missingId;
      }

      id = R.id.llTitle;
      LinearLayout llTitle = rootView.findViewById(id);
      if (llTitle == null) {
        break missingId;
      }

      id = R.id.tvAttendanceInSubmit;
      TextView tvAttendanceInSubmit = rootView.findViewById(id);
      if (tvAttendanceInSubmit == null) {
        break missingId;
      }

      id = R.id.tvAttendanceOutSubmit;
      TextView tvAttendanceOutSubmit = rootView.findViewById(id);
      if (tvAttendanceOutSubmit == null) {
        break missingId;
      }

      id = R.id.tvTopMonthText;
      TextView tvTopMonthText = rootView.findViewById(id);
      if (tvTopMonthText == null) {
        break missingId;
      }

      return new FragmentAttendenceBinding((RelativeLayout) rootView, attendanceRecycler,
          floatingComment, llBottom, llTitle, tvAttendanceInSubmit, tvAttendanceOutSubmit,
          tvTopMonthText);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
