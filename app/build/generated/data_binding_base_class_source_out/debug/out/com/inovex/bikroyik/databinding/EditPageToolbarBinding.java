// Generated by view binder compiler. Do not edit!
package com.inovex.bikroyik.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import com.inovex.bikroyik.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class EditPageToolbarBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ConstraintLayout consEditPageToolbar;

  @NonNull
  public final TextView descriptionEtt;

  @NonNull
  public final ImageView imgBackArrow;

  @NonNull
  public final TextView tittleEtt;

  private EditPageToolbarBinding(@NonNull ConstraintLayout rootView,
      @NonNull ConstraintLayout consEditPageToolbar, @NonNull TextView descriptionEtt,
      @NonNull ImageView imgBackArrow, @NonNull TextView tittleEtt) {
    this.rootView = rootView;
    this.consEditPageToolbar = consEditPageToolbar;
    this.descriptionEtt = descriptionEtt;
    this.imgBackArrow = imgBackArrow;
    this.tittleEtt = tittleEtt;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static EditPageToolbarBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static EditPageToolbarBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.edit_page_toolbar, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static EditPageToolbarBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      ConstraintLayout consEditPageToolbar = (ConstraintLayout) rootView;

      id = R.id.description_ett;
      TextView descriptionEtt = rootView.findViewById(id);
      if (descriptionEtt == null) {
        break missingId;
      }

      id = R.id.img_backArrow;
      ImageView imgBackArrow = rootView.findViewById(id);
      if (imgBackArrow == null) {
        break missingId;
      }

      id = R.id.tittle_ett;
      TextView tittleEtt = rootView.findViewById(id);
      if (tittleEtt == null) {
        break missingId;
      }

      return new EditPageToolbarBinding((ConstraintLayout) rootView, consEditPageToolbar,
          descriptionEtt, imgBackArrow, tittleEtt);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
