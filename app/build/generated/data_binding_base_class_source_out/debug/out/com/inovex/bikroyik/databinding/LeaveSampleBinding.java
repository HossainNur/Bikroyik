// Generated by view binder compiler. Do not edit!
package com.inovex.bikroyik.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import com.inovex.bikroyik.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class LeaveSampleBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final TextView sampleLeaveFrom;

  @NonNull
  public final TextView sampleLeaveNote;

  @NonNull
  public final TextView sampleLeaveStatus;

  @NonNull
  public final TextView sampleLeaveTo;

  @NonNull
  public final TextView sampleLeaveType;

  private LeaveSampleBinding(@NonNull LinearLayout rootView, @NonNull TextView sampleLeaveFrom,
      @NonNull TextView sampleLeaveNote, @NonNull TextView sampleLeaveStatus,
      @NonNull TextView sampleLeaveTo, @NonNull TextView sampleLeaveType) {
    this.rootView = rootView;
    this.sampleLeaveFrom = sampleLeaveFrom;
    this.sampleLeaveNote = sampleLeaveNote;
    this.sampleLeaveStatus = sampleLeaveStatus;
    this.sampleLeaveTo = sampleLeaveTo;
    this.sampleLeaveType = sampleLeaveType;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static LeaveSampleBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static LeaveSampleBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.leave_sample, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static LeaveSampleBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.sample_leave_from;
      TextView sampleLeaveFrom = rootView.findViewById(id);
      if (sampleLeaveFrom == null) {
        break missingId;
      }

      id = R.id.sample_leave_note;
      TextView sampleLeaveNote = rootView.findViewById(id);
      if (sampleLeaveNote == null) {
        break missingId;
      }

      id = R.id.sample_leave_status;
      TextView sampleLeaveStatus = rootView.findViewById(id);
      if (sampleLeaveStatus == null) {
        break missingId;
      }

      id = R.id.sample_leave_to;
      TextView sampleLeaveTo = rootView.findViewById(id);
      if (sampleLeaveTo == null) {
        break missingId;
      }

      id = R.id.sample_leave_type;
      TextView sampleLeaveType = rootView.findViewById(id);
      if (sampleLeaveType == null) {
        break missingId;
      }

      return new LeaveSampleBinding((LinearLayout) rootView, sampleLeaveFrom, sampleLeaveNote,
          sampleLeaveStatus, sampleLeaveTo, sampleLeaveType);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
