// Generated by view binder compiler. Do not edit!
package com.inovex.bikroyik.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import com.inovex.bikroyik.R;
import com.jaredrummler.materialspinner.MaterialSpinner;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityPosBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final LinearLayout bottomLayout;

  @NonNull
  public final Button btnSubmit;

  @NonNull
  public final EditText etPin;

  @NonNull
  public final RecyclerView postRecycler;

  @NonNull
  public final MaterialSpinner spinnerStore;

  @NonNull
  public final LinearLayout sprinnerBorder;

  private ActivityPosBinding(@NonNull ConstraintLayout rootView, @NonNull LinearLayout bottomLayout,
      @NonNull Button btnSubmit, @NonNull EditText etPin, @NonNull RecyclerView postRecycler,
      @NonNull MaterialSpinner spinnerStore, @NonNull LinearLayout sprinnerBorder) {
    this.rootView = rootView;
    this.bottomLayout = bottomLayout;
    this.btnSubmit = btnSubmit;
    this.etPin = etPin;
    this.postRecycler = postRecycler;
    this.spinnerStore = spinnerStore;
    this.sprinnerBorder = sprinnerBorder;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityPosBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityPosBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_pos, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityPosBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.bottom_layout;
      LinearLayout bottomLayout = rootView.findViewById(id);
      if (bottomLayout == null) {
        break missingId;
      }

      id = R.id.btn_submit;
      Button btnSubmit = rootView.findViewById(id);
      if (btnSubmit == null) {
        break missingId;
      }

      id = R.id.et_pin;
      EditText etPin = rootView.findViewById(id);
      if (etPin == null) {
        break missingId;
      }

      id = R.id.post_recycler;
      RecyclerView postRecycler = rootView.findViewById(id);
      if (postRecycler == null) {
        break missingId;
      }

      id = R.id.spinner_store;
      MaterialSpinner spinnerStore = rootView.findViewById(id);
      if (spinnerStore == null) {
        break missingId;
      }

      id = R.id.sprinner_border;
      LinearLayout sprinnerBorder = rootView.findViewById(id);
      if (sprinnerBorder == null) {
        break missingId;
      }

      return new ActivityPosBinding((ConstraintLayout) rootView, bottomLayout, btnSubmit, etPin,
          postRecycler, spinnerStore, sprinnerBorder);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
